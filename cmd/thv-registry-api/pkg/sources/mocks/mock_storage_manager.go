// Code generated by MockGen. DO NOT EDIT.
// Source: storage_manager.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_storage_manager.go -package=mocks -source=storage_manager.go StorageManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/stacklok/toolhive/cmd/thv-operator/api/v1alpha1"
	registry "github.com/stacklok/toolhive/pkg/registry"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageManager is a mock of StorageManager interface.
type MockStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockStorageManagerMockRecorder
	isgomock struct{}
}

// MockStorageManagerMockRecorder is the mock recorder for MockStorageManager.
type MockStorageManagerMockRecorder struct {
	mock *MockStorageManager
}

// NewMockStorageManager creates a new mock instance.
func NewMockStorageManager(ctrl *gomock.Controller) *MockStorageManager {
	mock := &MockStorageManager{ctrl: ctrl}
	mock.recorder = &MockStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageManager) EXPECT() *MockStorageManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorageManager) Delete(ctx context.Context, mcpRegistry *v1alpha1.MCPRegistry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, mcpRegistry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageManagerMockRecorder) Delete(ctx, mcpRegistry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageManager)(nil).Delete), ctx, mcpRegistry)
}

// Get mocks base method.
func (m *MockStorageManager) Get(ctx context.Context, mcpRegistry *v1alpha1.MCPRegistry) (*registry.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, mcpRegistry)
	ret0, _ := ret[0].(*registry.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageManagerMockRecorder) Get(ctx, mcpRegistry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageManager)(nil).Get), ctx, mcpRegistry)
}

// GetStorageReference mocks base method.
func (m *MockStorageManager) GetStorageReference(mcpRegistry *v1alpha1.MCPRegistry) *v1alpha1.StorageReference {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageReference", mcpRegistry)
	ret0, _ := ret[0].(*v1alpha1.StorageReference)
	return ret0
}

// GetStorageReference indicates an expected call of GetStorageReference.
func (mr *MockStorageManagerMockRecorder) GetStorageReference(mcpRegistry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageReference", reflect.TypeOf((*MockStorageManager)(nil).GetStorageReference), mcpRegistry)
}

// GetType mocks base method.
func (m *MockStorageManager) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockStorageManagerMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockStorageManager)(nil).GetType))
}

// Store mocks base method.
func (m *MockStorageManager) Store(ctx context.Context, mcpRegistry *v1alpha1.MCPRegistry, reg *registry.Registry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, mcpRegistry, reg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockStorageManagerMockRecorder) Store(ctx, mcpRegistry, reg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStorageManager)(nil).Store), ctx, mcpRegistry, reg)
}
