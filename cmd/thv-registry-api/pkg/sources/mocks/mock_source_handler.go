// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_source_handler.go -package=mocks -source=types.go SourceHandler,SourceHandlerFactory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sources "github.com/stacklok/toolhive-registry-server/cmd/thv-registry-api/pkg/sources"
	v1alpha1 "github.com/stacklok/toolhive/cmd/thv-operator/api/v1alpha1"
	registry "github.com/stacklok/toolhive/pkg/registry"
	gomock "go.uber.org/mock/gomock"
)

// MockSourceDataValidator is a mock of SourceDataValidator interface.
type MockSourceDataValidator struct {
	ctrl     *gomock.Controller
	recorder *MockSourceDataValidatorMockRecorder
	isgomock struct{}
}

// MockSourceDataValidatorMockRecorder is the mock recorder for MockSourceDataValidator.
type MockSourceDataValidatorMockRecorder struct {
	mock *MockSourceDataValidator
}

// NewMockSourceDataValidator creates a new mock instance.
func NewMockSourceDataValidator(ctrl *gomock.Controller) *MockSourceDataValidator {
	mock := &MockSourceDataValidator{ctrl: ctrl}
	mock.recorder = &MockSourceDataValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceDataValidator) EXPECT() *MockSourceDataValidatorMockRecorder {
	return m.recorder
}

// ValidateData mocks base method.
func (m *MockSourceDataValidator) ValidateData(data []byte, format string) (*registry.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateData", data, format)
	ret0, _ := ret[0].(*registry.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateData indicates an expected call of ValidateData.
func (mr *MockSourceDataValidatorMockRecorder) ValidateData(data, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateData", reflect.TypeOf((*MockSourceDataValidator)(nil).ValidateData), data, format)
}

// MockSourceHandler is a mock of SourceHandler interface.
type MockSourceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSourceHandlerMockRecorder
	isgomock struct{}
}

// MockSourceHandlerMockRecorder is the mock recorder for MockSourceHandler.
type MockSourceHandlerMockRecorder struct {
	mock *MockSourceHandler
}

// NewMockSourceHandler creates a new mock instance.
func NewMockSourceHandler(ctrl *gomock.Controller) *MockSourceHandler {
	mock := &MockSourceHandler{ctrl: ctrl}
	mock.recorder = &MockSourceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceHandler) EXPECT() *MockSourceHandlerMockRecorder {
	return m.recorder
}

// CurrentHash mocks base method.
func (m *MockSourceHandler) CurrentHash(ctx context.Context, mcpRegistry *v1alpha1.MCPRegistry) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHash", ctx, mcpRegistry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentHash indicates an expected call of CurrentHash.
func (mr *MockSourceHandlerMockRecorder) CurrentHash(ctx, mcpRegistry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHash", reflect.TypeOf((*MockSourceHandler)(nil).CurrentHash), ctx, mcpRegistry)
}

// FetchRegistry mocks base method.
func (m *MockSourceHandler) FetchRegistry(ctx context.Context, mcpRegistry *v1alpha1.MCPRegistry) (*sources.FetchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRegistry", ctx, mcpRegistry)
	ret0, _ := ret[0].(*sources.FetchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRegistry indicates an expected call of FetchRegistry.
func (mr *MockSourceHandlerMockRecorder) FetchRegistry(ctx, mcpRegistry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRegistry", reflect.TypeOf((*MockSourceHandler)(nil).FetchRegistry), ctx, mcpRegistry)
}

// Validate mocks base method.
func (m *MockSourceHandler) Validate(source *v1alpha1.MCPRegistrySource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", source)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockSourceHandlerMockRecorder) Validate(source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSourceHandler)(nil).Validate), source)
}

// MockSourceHandlerFactory is a mock of SourceHandlerFactory interface.
type MockSourceHandlerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSourceHandlerFactoryMockRecorder
	isgomock struct{}
}

// MockSourceHandlerFactoryMockRecorder is the mock recorder for MockSourceHandlerFactory.
type MockSourceHandlerFactoryMockRecorder struct {
	mock *MockSourceHandlerFactory
}

// NewMockSourceHandlerFactory creates a new mock instance.
func NewMockSourceHandlerFactory(ctrl *gomock.Controller) *MockSourceHandlerFactory {
	mock := &MockSourceHandlerFactory{ctrl: ctrl}
	mock.recorder = &MockSourceHandlerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceHandlerFactory) EXPECT() *MockSourceHandlerFactoryMockRecorder {
	return m.recorder
}

// CreateHandler mocks base method.
func (m *MockSourceHandlerFactory) CreateHandler(sourceType string) (sources.SourceHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHandler", sourceType)
	ret0, _ := ret[0].(sources.SourceHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHandler indicates an expected call of CreateHandler.
func (mr *MockSourceHandlerFactoryMockRecorder) CreateHandler(sourceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHandler", reflect.TypeOf((*MockSourceHandlerFactory)(nil).CreateHandler), sourceType)
}
