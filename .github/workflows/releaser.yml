#
# Copyright 2025 Stacklok, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This workflow compiles toolhive Registry API using a SLSA3 compliant
# build and then verifies the provenance of the built artifacts.
# It releases the following architectures: amd64, arm64, and armv7 on Linux,
# Windows, and macOS.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: Release
on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  compute-build-flags:
    name: Compute Build Flags
    runs-on: ubuntu-latest
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
    steps:
      - id: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "commit=$GITHUB_SHA" >> $GITHUB_OUTPUT
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> $GITHUB_OUTPUT
          echo "version=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> $GITHUB_OUTPUT
  release-binaries:
    needs:
      - compute-build-flags
    name: Build and Release Binaries
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    permissions:
      contents: write # To add assets to a release.
      id-token: write # To do keyless signing with cosign
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@aa0e114b2e19480f157109b9922bda359bd98b90 # v0.20.8

      - name: Install Cosign
        uses: sigstore/cosign-installer@7e8b541eb2e61bf99390e1afd4be13a184e9ebc5 # v3.10.1

      - name: Build and Verify Binary Version
        env:
          VERSION: ${{ needs.compute-build-flags.outputs.version }}
          COMMIT: ${{ needs.compute-build-flags.outputs.commit }}
          COMMIT_DATE: ${{ needs.compute-build-flags.outputs.commit-date }}
          TREE_STATE: ${{ needs.compute-build-flags.outputs.tree-state }}
        run: |
          # Build a test binary using the same env vars as GoReleaser
          go build -ldflags "-s -w -X github.com/stacklok/toolhive-registry-server/pkg/versions.Version=${VERSION} -X github.com/stacklok/toolhive-registry-server/pkg/versions.Commit=${COMMIT} -X github.com/stacklok/toolhive-registry-server/pkg/versions.BuildDate=$(date -Iseconds) -X github.com/stacklok/toolhive-registry-server/pkg/versions.BuildType=release" -o ./thv-test ./cmd/thv-registry-api

          # Get version from binary
          BINARY_VERSION=$(./thv-registry-api version --format json | jq -r '.version')
          EXPECTED_TAG="${GITHUB_REF_NAME}"

          echo "Expected tag: $EXPECTED_TAG"
          echo "Binary reports version: $BINARY_VERSION"

          # Verify version matches tag
          if [[ "$BINARY_VERSION" != "$EXPECTED_TAG" ]]; then
            echo "❌ VERSION MISMATCH!"
            echo "  Expected: $EXPECTED_TAG"
            echo "  Got:      $BINARY_VERSION"
            echo "This indicates a bug in the release process - stopping before publishing."
            exit 1
          fi

          echo "✅ Version verification passed: $BINARY_VERSION"
          rm ./thv-test

      - name: Run GoReleaser
        id: run-goreleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WINGET_GITHUB_TOKEN: ${{ secrets.WINGET_GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          VERSION: ${{ needs.compute-build-flags.outputs.version }}
          COMMIT: ${{ needs.compute-build-flags.outputs.commit }}
          COMMIT_DATE: ${{ needs.compute-build-flags.outputs.commit-date }}
          TREE_STATE: ${{ needs.compute-build-flags.outputs.tree-state }}

      - name: Generate subject
        id: hash
        env:
          ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          hashes=$(echo $ARTIFACTS | jq --raw-output '.[] | {name, "digest": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join("  ") | sub("^sha256:";"")' | base64 -w0)
          if test "$hashes" = ""; then # goreleaser < v1.13.0
            checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
            hashes=$(cat $checksum_file | base64 -w0)
          fi
          echo "hashes=$hashes" >> $GITHUB_OUTPUT

  image-build-and-push:
    name: Build and Sign Image
    needs: [ release-binaries ]
    permissions:
      contents: write
      packages: write
      id-token: write
    uses: ./.github/workflows/image-build-and-publish.yml

#  provenance:
#    name: Generate provenance (SLSA3)
#    needs:
#      - release
#    permissions:
#      actions: read # To read the workflow path.
#      id-token: write # To sign the provenance.
#      contents: write # To add assets to a release.
#    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
#    with:
#      base64-subjects: "${{ needs.release.outputs.hashes }}"
#      upload-assets: true # upload to a new release

#  verification:
#    name: Verify provenance of assets (SLSA3)
#    needs:
#      - release
#      - provenance
#    runs-on: ubuntu-latest
#    permissions: read-all
#    steps:
#      - name: Install the SLSA verifier
#        uses: slsa-framework/slsa-verifier/actions/installer@3714a2a4684014deb874a0e737dffa0ee02dd647 # v2.6.0
#      - name: Download assets
#        env:
#          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
#          CHECKSUMS: "${{ needs.release.outputs.hashes }}"
#          ATT_FILE_NAME: "${{ needs.provenance.outputs.provenance-name }}"
#        run: |
#          set -euo pipefail
#          checksums=$(echo "$CHECKSUMS" | base64 -d)
#          while read -r line; do
#              fn=$(echo $line | cut -d ' ' -f2)
#              echo "Downloading $fn"
#              gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "$fn"
#          done <<<"$checksums"
#          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "$ATT_FILE_NAME"
#      - name: Verify assets
#        env:
#          CHECKSUMS: "${{ needs.release.outputs.hashes }}"
#          PROVENANCE: "${{ needs.provenance.outputs.provenance-name }}"
#        run: |
#          set -euo pipefail
#          checksums=$(echo "$CHECKSUMS" | base64 -d)
#          while read -r line; do
#              fn=$(echo $line | cut -d ' ' -f2)
#              echo "Verifying SLSA provenance for $fn"
#              slsa-verifier verify-artifact --provenance-path "$PROVENANCE" \
#                                            --source-uri "github.com/$GITHUB_REPOSITORY" \
#                                            --source-tag "$GITHUB_REF_NAME" \
#                                            "$fn"
#          done <<<"$checksums"
